#!/usr/bin/env node
const app = require('../app');
const fs = require('fs');
const path = require('path');
const debug = require('debug')('checkserver:server');
const https = require('https');
const WebSocket = require('ws');
const {check} = require("../controller/checkControl");
const port = '443';
app.set('port', port);
var options = {
    key: fs.readFileSync('../privateKey/2_check.qianyanxu.com.key', 'utf8'),
    cert: fs.readFileSync('../privateKey/1_check.qianyanxu.com_bundle.crt', 'utf8')
};


const server = https.createServer(options, app);

const wss = new WebSocket.Server({ server });
check.checkIn(wss);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
